//все функции winsock2 http://tehnofil.ru/?id=92

//-------------------------------клиент------------------------------

#include <stdio.h>
#include <string.h>
// Для работы с библиотекой Winsock2  в исходный текст нужно включить директиву #include <winsock2.h>,
//а в командной строке компоновщика указать ws2_32.lib. Библиотека Winsock2 должна быть указана раньше,
// чем библиотека Windows.
#include <winsock2.h>
#include <windows.h>

#define PORT 31337         //  Порт, через который идет подключение к серверу....21,80,25,110 и т.п.
#define SERVERADDR "127.0.0.1"     // Адрес сервера

int main ( int argc, char* argv [ ] )
{
         char buff [ 1024 ] ;
         printf ( "TCP Client \n" ); // ну, тут и так понятно
//Перед началом использования библиотеки ее необходимо подготовить к работе с помощью вызова функции
// WSAStartup(Ver, lpWSAData), передав ей в старшем байте номер требуемой версии, а в младшем подверсии.
// Аргумент lpWSAData должен указывать на структуру WSADATA, в которую при успешной инициализации
//будет занесена информация о производителе библиотеки. Если инициализация не удалась, то функция //возвращает не нулевое значение.
         if ( WSAStartup ( 0x202, ( WSADATA * ) &buff [ 0 ] ) )
         {
                            printf ( " WSAStart error  %d \n ", WSAGetLastError ( ) );
                            return -1;
          }
// Создаем сокет    socket ( int af, int type, int protocol ). Первый слева аргумент указывает на семейство использу-
//емых протоколов, AF_INET - используеться при создании интернет приложений. SOCK_STREAM - тип //создаваемого сокета, SOCK_STREAM (потоковый) или SOCK_DGRAM (дейтаграммный) или SOCK_RAW //(сырой).Последний аргумент задает тип создаваемого сокета, нулевое значение соответствует выбору по //умолчанию, ТСР - для потоковых, и UDP - дейтограммных.
//Если функция завершилась успешно то она возвращает дескриптор сокета.
          SOCKET my_sock ;
          my_sock=socket ( AF_INET, SOCK_STREAM, 0 );
          if  ( my_sock < 0 )        //
          {
                            printf (" Socket ( ) error    %d \n ", WSAGetLastError ( ) );
                            return  -1;
          }
//Далее расмотрим установку соединения. Заполнение структуры  sockaddr_in :
          sockaddr_in  dest_addr ;
          dest_addr.sin_family=AF_INET; //инет коннектинг
          dest_addr.sin_port=htons ( PORT ); //порт
          HOSTENT    *hst;  // хост
// Преобразование ip-адреса из символьного в сетевой формат.
          if    ( inet_addr ( SERVERADDR ) !=INADDR_NONE )     dest_addr.sin_addr=inet_addr ( SERVERADDR) ;
          else
//Осуществляем поптыку получения ip-адреса по доменному имени сервера.
                    if   ( hst=gethostbyname ( SERVERADDR ) )    ( ( unsigned long   * ) &dest_addr.sin_addr ) [ 0 ] =
//hst->h_addr_list содержит массив  указателей на адреса, НО не массив адресов
                                                                                             ( ( unsigned long    ** ) hst->h_addr_list ) [ 0 ] [ 0 ] ;
//Если ip-адрес не получен, то работа программы завершаеться
                    else
                    {
                                      printf ( " invalid address   %s \n ", SERVERADDR ) ;
                                      closesocket ( my_sock ) ;
                                      WSACleanup ( ) ;
                                      return  -1;
                    }
//После получения адреса сервера, попытаемся установит соединение.Для этого мы вызовем функцию connect
// (SOCKET s, sockaddr  *  name, len). Первый элемент -SOCKET- это дескриптор сокета,  второй -
//указатель на структуру sockaddr, содержащую в себе адрес (ip) и порт, последний аргумент сообщает о размере
// sockaddr.
// Если по каким-то причинам установить соединение не удаеться, то функция возвращает не нулевое значение.
            if  (connect ( my_sock, ( sockaddr  * ) &dest_addr, sizeof ( dest_addr ) ) )
            {
                            printf (" Connect error  %d \n ", WSAGetLastError ( ) );
                            return -1;
            }

            printf (" Соединение с %s успешно установлено \n\ Type quit for quit \n\n" , SERVERADDR );
 //Далее начинаеться чтение и передача сообщений.
            int nsize;
            while ( ( nsize = recv ( my_sock, &buff[0], sizeof ( buff ) -1,0 ) ) !=SOCKET_ERROR )
            {
       //Ставим завершающий ноль в конце строки
                              buff[ nsize ] =0;
       //Выводим на экран
                              printf ( " S=>C: %s ", buff  ) ;
       //Читаем пользовательский ввод с клавиатуры
                              printf ( "S<=C: " ) ;
                              fgets ( &buff [ 0 ] , sizeof ( buff ) -1, stdin );
        //После того, как ввели слово quit, выходим.....
                              if  ( !strcmp ( &buff [ 0 ], "quit \n " ) )
                              {
                                          printf ( " Exit " );
                                          closesocket ( my_sock ) ; //выход правильный
                                          WSACleanup ( ) ;
                                           return 0;
                              }
        //Передача строки клиента серверу
                              send ( my_sock, &buff [ 0 ], nsize, 0 ) ;
              }

              printf ( " Recv error  %d \n", WSAGetLastError ( )  );
              closesocket ( my_sock ) ;
              WSACleanup ( ) ;
              return -1;
}

//-----------------------------сервер(UDP)----------

#include<stdio.h>
#include<winsock2.h>

#define PORT 31337  //Порт сервера
#define sHello "Hello, %s [%s] user\n"  //Приветствие

int main(int argc, char* argv[])
{
             char buff[1024];
             cout<<"UDP Server\n";
             //Подключаем библиотеку
             if(WSAStartup(0x202,(WSADATA  *)  &buff[0]))
             {  
                        cout<<"WSAStartup error: %d\n", WSAGetLastError( ));
                        return -1;
              }
              //Создаем сокет
              SOCKET name_sock;
              name_sock=socket(AF_INET, SOCK_DGRAM, 0);
              if  (name_sock==INVALID_SOCKET)
              {
                         cout<<"Socket ( ) error: %d\n", WSAGetLastError( )";
                         WSACleanup( );
                          return -1;
              }
              
              sockaddr_in  local_addr;
              local_addr.sin_family=AF_INET;
              local_addr.sin_addr.s_addr=INADDR_ANY;
             local_addr.sin_port=htons(PORT);
   /*прежде, чем сервер сможет использовать сокет, он должен связать его с локальным адресом.Первый слева аргумент - это  дескриптор сокета, который был возвращен функцией сокет, за ним указывают структуру sockaddr  и её длину. Поскольку сервер садиться, в отличии от клиента, на строго определенный порт осуществляем связывание вручную*/        
              if  (bind(name_sock, (sockaddr  *)  &local_addr, sizeof(local_addr)))
              {
                            cout<<"bind error: %d\n", WSAGetLastError( )";
                             closesocket(name_sock);
                             WSACleanup( );
                              return -1;
               }
              //Обработка пакетов, присланных клиентами
              while(1)
              {
                            sockaddr_in  client_addr;
                            int client_addr_size = sizeof(client_addr);
                            int bsize=recvfrom(name_sock, &buff[0], sizeoff(buff)-1,0, (sockaddr  *) &client_addr, &client_addr_size);
                            if  (bsize==SOCKET_ERROR)
                             {
                                            cout<<"recvfrom( ) error: %d\n", WSAGetLastError( )";
                               }
                          //Определение IP-адреса клиента и прочих атрибутов
                              HOSTENT  *hst;
                              hst=gethostbyaddr((char *) &client_addr.sin_addr, 4, AF_INET);
                              cout<<"+%s  [%s:%d] new DATAGRAM!\n", (hst) ?hst->h_name:"Unknown host",                                                                                                                                                                                                                                                                        inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port)";
                                //Добавление завершающего нуля
                               buff[bsize]=0;
                               //Вывод на экран
                               printf("C=>S:%s\n", &buff[0]);
                               //Посылка дейтограммы клиенту
                               sendto(name_sock, &buff[0], bsize,0, (sockaddr  *) &client_addr, sizeof(client_addr));
                 }
                 return 0;
}





server.c:
#include <iostream>
#include <winsock>

using namespace std;

void main()
{
  WSAData WSData;
  WSAStartup(0x101,&WSData);
  SOCKET S = socket(AF_INET,SOCK_STREAM,0);
  sockaddr_in SA;
  SA.sin_family=AF_INET;
  SA.sin_port=htons(3135);
  SA.sin_addr.S_un.S_addr=INADDR_ANY;
  bind(S,(sockaddr*)&SA,sizeof(SA));
  listen(S,SOMAXCONN);
 
  SOCKET NS;
  while ((NS = accept(S,0,0))!=INVALID_SOCKET)
  {
    cout<<"-------------------->\n";
    cout<<"Connected...\n";
    char n = 0;
    recv(NS,&n,1,0);
    cout<<"Received Length = "<< int(n) <<"\n";
    char* a=new char[100];
    recv(NS,a,n,0);
    cout<<"Received: \"";
    for (int i=0;i<n;i++) { cout<<a[i]; }
    cout<<"\"\n";
    closesocket(NS);
    cout<<"-------------------->\n";
  }
  closesocket(S);
  int n;
}


client.c:
#include <iostream>
#include <winsock>

using namespace std;

void main()
{
  WSAData WSData;
  WSAStartup(0x101,&WSData);
  SOCKET S = socket(AF_INET,SOCK_STREAM,0);
  sockaddr_in SA;
  SA.sin_family=AF_INET;
  SA.sin_port=htons(3135);
  SA.sin_addr.S_un.S_addr=inet_addr("127.0.0.1");
  connect(S,(sockaddr*)&SA,sizeof(SA));
  string s;
  cin>>s;
  char len=s.length();
  send(S,&len,1,0);
  send(S,s.c_str(),s.length(),0);
  int n;
  cin>>n;
  closesocket(S);
}